val hasAndroid: Boolean by rootProject.extra

val pname = "korim"

File(projectDir, "$pname/src/commonMain/kotlin/com/soywiz/$pname/internal/${pname.capitalize()}Version.kt").apply {
	parentFile.mkdirs()
	val newText = "package com.soywiz.$pname.internal\n\ninternal const val ${pname.toUpperCase()}_VERSION = \"${project.version}\""
	if (!exists() || (readText() != newText)) writeText(newText)
}

val projDeps = Deps().run { LinkedHashMap<String, List<Dep>>().apply {
    val base = listOf(kotlinxCoroutines, klock, kmem, kds, korio, korma)
    this["korim"] = base
    this["korim-qr"] = base + Dep(project = ":korim")
    this["korim-jpeg"] = base + Dep(project = ":korim")
} }

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

class Deps {
	val klock = DepKorlib("klock")
    val korma = DepKorlib("korma")
	val kmem = DepKorlib("kmem")
	val kds = DepKorlib("kds")
    val korio = DepKorlib("korio")
	val kotlinxCoroutines = Dep {
		val coroutinesVersion: String by project
		val coroutines = "kotlinx-coroutines-core"
		add("commonMainApi", "org.jetbrains.kotlinx:$coroutines-common:$coroutinesVersion")
		add("jvmMainApi", "org.jetbrains.kotlinx:$coroutines:$coroutinesVersion")
		add("jsMainApi", "org.jetbrains.kotlinx:$coroutines-js:$coroutinesVersion")
		if (hasAndroid) {
			add("androidMainApi", "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion")
			add("androidTestImplementation", "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion")
		}
		add("linuxX64MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_linux_x64:$coroutinesVersion")
		add("mingwX64MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_mingw_x64:$coroutinesVersion")
		add("macosX64MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_macos_x64:$coroutinesVersion")
		add("iosX64MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_ios_x64:$coroutinesVersion")
		add("iosArm32MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_ios_arm32:$coroutinesVersion")
		add("iosArm64MainApi", "org.jetbrains.kotlinx:$coroutines-native_debug_ios_arm64:$coroutinesVersion")
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

fun DepKorlib(name: String) = Dep("com.soywiz:$name:${project.property("${name}Version")}")
class Dep(val commonName: String? = null, val project: String ? = null, val register: (DependencyHandlerScope.() -> Unit)? = null)

subprojects {
	val deps = projDeps[project.name]
	if (deps != null) {
		dependencies {
			for (dep in deps) {
				if (dep.commonName != null) {
                    for (target in listOf("android", "iosArm64", "iosArm32", "iosX64", "js", "jvm", "linuxX64", "macosX64", "mingwX64", "metadata")) {
                        val suffix = "-${target.toLowerCase()}"
                        val base = when (target) {
                            "metadata" -> "common"
                            else -> target
                        }

                        val (group, name, version) = dep.commonName.split(":", limit = 3)
                        val packed = "$group:$name$suffix:$version"

                        add("${base}MainApi", packed)
                        add("${base}TestImplementation", packed)
                    }
				}
				if (dep.project != null) {
					add("commonMainApi", rootProject.project(dep.project))
					add("commonTestImplementation", rootProject.project(dep.project))
				}
				dep.register?.invoke(this)
			}
		}
	}
}

